#include <iostream>
#include <queue>
#include <vector>
using namespace std;

struct Node {
    char ch;           
    int freq;         
    Node *left, *right;

    Node(char c, int f) {
        ch = c;
        freq = f;
        left = right = NULL;
    }
};

struct compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq; 
    }
};


void printCodes(Node* root, string code) {
    if (root == NULL)
        return;

    // if this is a leaf node, print the character and its code
    if (!root->left && !root->right)
        cout << root->ch << " : " << code << endl;

    // go left -> add '0'
    printCodes(root->left, code + "0");

    // go right -> add '1'
    printCodes(root->right, code + "1");
}

int main() {
    int n;
    cout << "Enter number of characters: ";
    cin >> n;

    char arr[n];
    int freq[n];

    cout << "Enter characters: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    cout << "Enter corresponding frequencies: ";
    for (int i = 0; i < n; i++)
        cin >> freq[i];


    priority_queue<Node*, vector<Node*>, compare> minHeap;

    for (int i = 0; i < n; i++)
        minHeap.push(new Node(arr[i], freq[i]));


    while (minHeap.size() > 1) {
        Node* left = minHeap.top(); minHeap.pop();
        Node* right = minHeap.top(); minHeap.pop();

        Node* newNode = new Node('$', left->freq + right->freq); // '$' = internal node
        newNode->left = left;
        newNode->right = right;

        minHeap.push(newNode);
    }

 
    Node* root = minHeap.top();
    cout << "\nHuffman Codes:\n";
    printCodes(root, "");

    return 0;
}
