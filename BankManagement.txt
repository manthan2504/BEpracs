// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract BankAccount {
    // Mapping means key-value pair
    // Each user (address) has a balance (uint)
    mapping(address => uint) public balances;

    // Events help record transactions on blockchain (for logs/UI)
    event Deposited(address indexed account, uint amount);
    event Withdrawn(address indexed account, uint amount);

    // Deposit money into your account
    function deposit() public payable {
        require(msg.value > 0, "Amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit Deposited(msg.sender, msg.value);
    }

    // Withdraw money from your account
    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Not enough balance");
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
        emit Withdrawn(msg.sender, amount);
    }

    // View your account balance
    function getBalance() public view returns (uint) {
        return balances[msg.sender];
    }

    // Special functions for receiving ETH directly
    receive() external payable {
        balances[msg.sender] += msg.value;
        emit Deposited(msg.sender, msg.value);
    }

    fallback() external payable {}
}
